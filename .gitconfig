[alias]
	ca = !git add -A && git commit
	ci = commit
	cl = clone
	co = checkout
	cb = checkout -b
	cp = cherry-pick
	cm = checkout master
	st = status
	fa = fetch --all
	aa = add --all
	pr = pull-request
	br = browse
	ci = ci-status
	po = "!git push --set-upstream origin \"$(git rev-parse --abbrev-ref HEAD)\""
	pum = push upstream master
	ri = rebase --interactive --autosquash upstream/master
        stup = !git stash && git up && git stash apply
	save = !git add -A && git commit -m 'quick save'
	fix = !git add -A && git commit --fixup HEAD
	undo = reset --soft HEAD~1
	ac = !git add -A && git commit --amend -C HEAD
	pf = push -f
	acpf = !git ac && git pf
        rekt = reset --hard
	l = log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --date=relative
	dmb = "!f() { git checkout --quiet master && git branch --merged | grep --invert-match '\\*' | xargs -n 1 git branch --delete; git checkout --quiet @{-1}; }; f"
	up = !git checkout master && git branch --set-upstream-to=upstream/master && git pull && git push origin master && git dmb
	setup = "!f() { git remote add upstream $1 && git fetch --all && git up;}; f"
[apply]
	# Detect whitespace errors when applying a patch
	whitespace = fix
[core]
	# Use custom `.gitignore` and `.gitattributes`
	excludesfile = ~/.gitignore
	attributesfile = ~/.gitattributes

	# Treat spaces before tabs and all kinds of trailing whitespace as an error
	# [default] trailing-space: looks for spaces at the end of a line
	# [default] space-before-tab: looks for spaces before tabs at the beginning of a line
	whitespace = space-before-tab,-indent-with-non-tab,trailing-space

	# Make `git rebase` safer on OS X
	# More info: <http://www.git-tower.com/blog/make-git-rebase-safe-on-osx/>
	trustctime = false

	# Prevent showing files whose names contain non-ASCII symbols as unversioned.
	# http://michael-kuehnel.de/git/2014/11/21/git-mac-osx-and-german-umlaute.html
	precomposeunicode = false
[color]
	# Use colors in Git commands that are capable of colored output when
	# outputting to the terminal. (This is the default setting in Git â‰¥ 1.8.4.)
	ui = auto
[color "branch"]
	current = yellow reverse
	local = yellow
	remote = green
[color "diff"]
	meta = yellow bold
	frag = magenta bold # line info
	old = red # deletions
	new = green # additions
[color "status"]
	added = yellow
	changed = green
	untracked = cyan
[credential]
	helper = store
[user]
	name = aroddy
	email = aroddy@peoplenetonline.com
[core]
	editor = slap
	autocrlf = input
[push]
	default = simple
